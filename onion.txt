katmanlı mimari
uygulama işlevselliğini yatay katmanlara ayırır.
her katman yalnızca bir alt katmana bağımlıdır
1. data access layer (veri erişim katmanı)
2. business layer (iş katmanı)
3. presentation layer (sunum katmanı)

her katman kendinden önceki ve sonrakiyle konuşabilir
ters bağımlılık yoktur, katmanlar sıkı bağımlıdır (tightly coupled)

__onion modeli__ 
bağımlılıklar dış katmanlardan iç katmanlara doğru akar
iş kuralları merkezde ve izole olarak korunur
dıştaki katman bütün katmanları kapsar.
dependency inversion uygulanır (bağımlılıkların tersine çevrilmesi)
iç katmanlar dış katmanları bilmez
infrastructure -> application -> domain yönünde bağımlılık vardır

onion = solid + ddd + Inversion of Control (IoC)

1. core (domain)
2. application (uygulama)
3. infrastructure (altyapı)
4. presentation (UI / API) (sunum)

merkez = core (domain)
en ortak olanlar core'dadır.
repositorylerin interface'leri.
normal klasik katmanlıdan farkı = dıştaki katman içerdekilere erişebilir.
kümeler mantığıyla aynı

dal katmanına karşılık gelen = infrastructure
ortama bağlı olan (ef, oracle, vb...)
configuration (sql serverl ile alakalı olduğundan)
(?)repositorylerin concrete'leri (çünkü context(sql-oracle db) değiştiğinde concrete yapılarının hepsi değişebilir)
migrationlar

bl'ye karşılık gelen = application layer
servis yapıları 
restfull servisler
** view model ve DTO'ların çoğu ** => her projede kullanılıyorsa
Not: IFormFile Application Layer'a koyulmaz. 
Bağımlılığı arttırır. 
UI katmanına koyulur. 
Çünkü IFormFile Web'e özgüdür.

Not: Cookie mantığı browser'da olduğundan Application Layer'da olmalı.
Not: SignInManager UI'da kullanılır.

Neden? Seperation of Concerns
Yönetilebilir

--------------------------------------------------

katman aslında DLL.
taşınabilir olması demek dll'in yerini değiştirmek
örn: prizler, ampul duyları





SOLID PRINCIPLES
1. single responsibility principle (SRP) = bir sınıfın ya da metodun sadece tek bir sorumluluğu olmalı
  bir iş yapması demek, 1 class içinde 10 metod 3 property olabilir ama 1 amaca hizmet etmesidir.
  öğrenmesi en kolay olan ama uygulaması en zor olan prensiptir.
2. open/closed principle (OCP) = var olan sınıfı değiştirmeden yeni davranışlar eklenebilmelidir.
  soyut sınıflar(kalıtım) ve arayüzler aracılığıyla
  open extension-closed modification
  yapı zamanla geliştirilebilmeli ama var olan şey değiştirilmemeli - 1 kere yaz bir daha dokunulmasın
3. liskov substitution principle (LSP) = bir alt sınıf, üst sınıfın yerine sorunsuzca geçebilmeli
  yani base sınıf yerine derived sınıf kullanılınca düzgün çalışmalı. kalıtım doğru şekilde yapılmalı
  polymorphism'de ToString() metodunun değişmemesi örneğin.
4. interface segregation principle (ISP) = kullanılmayan arayüz yöntemlerine bağımlı kalınmamalı
  büyük arayüzleri böl - küçük, özelleşmiş arayüzler
  kullanıcı sadece ihtiyacı olan metoda erişmeli
5. dependency inversion principle (DIP) = bağımlılığın tersine çevrilmesi, yüksek seviyeli sınıflar, düşük seviyeli sınıflara bağımlı olmamalı. her ikisi de soyutlamalara bağımlı olmalı.
  tightly coupled olmaması gerek. loosely coupled olmalı. çünkü içerdeki sınıf değiştirirken dıştaki da değişmek zorunda olur, bu da open/closed principle'a uymaz.
  bu amaçla interface kullanılır. Concrete sınıf değiştirilirse Abstract olan interface'e dokunulmasın diye.
  bu da bize esneklik sağlar.
  3 yöntemi var: 
    1- constructor injection, 
    2- method injection, 
    3- property injection
  neden en çok ctor injection? çünkü kullanıcıyı bir şeylere zorlar.
  parametrik ctor varsa default ctor yoktur. parametre gelme zorunluluğu olur.
  method ya da prop injectionda böyle bir zorunluluk yok.

Uncle Bob - Robert Martin ortaya atan kişi.
Kitabı: Clean Code 
Sektördeki prensipleri ve kendi prensiplerini derlemiştir.
Akronimlerin akronimleridir.

Bu 5 prensibin birbirini desteklediğini görüyoruz. OCP varsa SRP'ye de uygun olmalı; DI, hem SRP hem OCP'ye uygun olmalıdır.
En önemlileri 1-2-5 (SRP, OCP, DIP)

hatırlatma: C# da mutliple inheritance yoktu, bu da diamond problemdi. interface kullanarak bu sorun çözülürdü.

DDD (Domain-Driven Design)
uygulamanın çekirdeğinde, iş mantığını ve gerçek hayat kurallarını yansıtan bir domain modeli bulunmalı.
  amaç: teknik detayı iş kurallarından ayırmak
